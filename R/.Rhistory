w[[j]]=spls.mod$pred$w
}else{
score[[j]]=xx
genes[[j]]=names(xx)
spls.beta[[j]]=NA
k.opt[j]=1
eta.opt[j]=w[[j]]=NA
}
}
names(genes)=pathways
names(spls.beta)=pathways
xx=foreach(j=1:length(score), .combine='cbind')%do%{score[[j]]}
set.seed(seed)
cvlas=cv.glmnet( x=as.matrix(xx),y=Surv(time, status),
family="cox",type.measure="deviance",alpha=1)
cols=sapply(score,ncol)
##this lambda should also be optional
path.beta=as.vector(coef(cvlas,s=cvlas$lambda.1se))
path.beta=data.frame( rep(pathways,cols),path.beta )
return(list( genes=genes, gene.beta=spls.beta, w=w, path.beta=path.beta ))
}
pred=function( obj, newx, n, cuts=NULL){
##number of pathways
beta=obj$path.beta
w=obj$w
genes=obj$genes
pathway=unique(beta[,1])
np=length(pathway)
psrp=matrix(0,nrow=n,ncol=np)
for(j in 1:np){
betaj=x=NULL
idx=which(beta[,1]==pathway[j])
betaj=beta[idx,2]
x=as.matrix(newx[[j]])
x=scale(x,T,T)
##predict score
A=which(colnames(x)%in%genes[[j]]==T)
xA=as.matrix(x[,A])
if(is.na(w[j])==T){sc=xA}
if(is.na(w[j])==F){sc=xA %*% w[[j]]}
if(ncol(sc)>1){psrp[,j]=sc %*% betaj}
if(ncol(sc)==1){psrp[,j]=sc*betaj}
}
risk=apply(psrp,1,function(x){length(which(x>0))})
if(is.null(cuts)){
low=as.numeric(summary(risk)[2])
high=as.numeric(summary(risk)[5])
}
if(length(cuts)==2){
low=cuts[1]
high=cuts[2]
}
riskcat=ifelse(risk<=low,"low","med")
riskcat=ifelse(risk>=high,"high",riskcat)
return(list(risk.index=risk,riskcat=riskcat,cuts=c(low,high)))
}
survival.curve<- function(predicted, time=t, status=d){
reg=survfit(Surv(t,d)~factor(predicted$riskcat))
cuts=predicted$cuts
plot( reg, col=c("red","black","green"),xlim=c(0,60),
xlab="Months From Diagnosis to Death",ylab="Survival Fraction (KM)" )
legend("bottomleft",lty=c(1,1,1),col=c("red","black","green"),
c( paste("High",">",cuts[2]),paste("Low","<",cuts[1]), "Medium"),bty="n")
}
survival.roc<- function(predicted, time=t, status=d){
roc=survivalROC(Stime=t,status=d,
marker=predicted$risk.index, predict.time=60, method="KM")
plot(roc$FP, roc$TP, type="l", xlim=c(0,1), ylim=c(0,1), col="red",
xlab="1-Specificity", ylab="Sensitivity")
abline(0,1)
}
load("C:/Users/sunze/Dropbox/CancerGenomics/package/pathCluster/data/TCGA.RData")
train.list=prefilter( data=express.dat, time=t, status=d,
p.cut=0.5, plist=path.list )
##pathways left after prefiltering
pnames=names(train.list)
results=path.cluster( data=train.list, pathways=pnames,
time=t, status=d, fold=5, K=3, etas=c(0.1,0.9)  )
#results$genes
predicted=pred( obj=results, newx=train.list, n=50 )
survival.curve(predicted, time=t, status=d)
survival.roc(predicted, time=t, status=d)
predicted
results
results$path.beta
results[results$betas!=0,]
results[which(results$betas!=0),]
which(results$betas!=0)
results$betas
results[which(results$path.betas!=0),]
which(results$path.betas!=0)
results$path.betas
results$path.betas[,2]
results$path.betas
results$path.beta[,2]
which(results$path.beta[,2]!=0)
results[which(results$path.beta[,2]!=0),]
mat=results$path.beta[which(results$path.beta[,2]!=0),]
mat
lab1=gsub( "KEGG_", "", results$path.beta[,1] )
lab2=gsub( "_PATHWAY", "", lab1 )
results$path.beta[,1]
for(i in 1:length(results$path.beta[,1])){
j=which( mat[,1]==results$path.beta[,1][i] )
coefs[[i]]=mat[j,2]
}
o=order(-sapply(coefs,max))
coefs=coefs[o]
betas<-results$path.beta[,2]
results<-results$path.beta
index=coefs=list()
mat=results[betas!=0,]
lab1=gsub( "KEGG_", "", paths )
lab2=gsub( "_PATHWAY", "", lab1 )
paths<-results$path.beta[,1]
paths<-results[,1]
index=coefs=list()
mat=results[betas!=0,]
lab1=gsub( "KEGG_", "", paths )
lab2=gsub( "_PATHWAY", "", lab1 )
for(i in 1:length(paths)){
j=which( mat[,1]==paths[i] )
coefs[[i]]=mat[j,2]
}
o=order(-sapply(coefs,max))
coefs=coefs[o]
for(i in 1:length(paths)){
if(length(coefs[[i]])>1){
index[[i]]=seq( i, i+0.1*length(coefs[[i]])-0.1, 0.1 )
}
if(length(coefs[[i]])==1){index[[i]]=i}
}
plot( unlist(index), exp(unlist(coefs)), type="h",
xlab="",ylab="Hazard ratio",xaxt="n")
abline(h=1,lty=2,col="red")
axis(1, at=1:length(paths), lab2[o], las=2,cex.axis=0.55 )
par( mar=c(14, 4, 1, 2) + 0.1 )
plot( unlist(index), exp(unlist(coefs)), type="h",
xlab="",ylab="Hazard ratio",xaxt="n")
abline(h=1,lty=2,col="red")
axis(1, at=1:length(paths), lab2[o], las=2,cex.axis=0.55 )
plotPathwayEffect<- function(results){
results<-results$path.beta
betas<-results[,2]
paths<-results[,1]
index=coefs=list()
mat=results[betas!=0,]
lab1=gsub( "KEGG_", "", paths )
lab2=gsub( "_PATHWAY", "", lab1 )
for(i in 1:length(paths)){
j=which( mat[,1]==paths[i] )
coefs[[i]]=mat[j,2]
}
o=order(-sapply(coefs,max))
coefs=coefs[o]
for(i in 1:length(paths)){
if(length(coefs[[i]])>1){
index[[i]]=seq( i, i+0.1*length(coefs[[i]])-0.1, 0.1 )
}
if(length(coefs[[i]])==1){index[[i]]=i}
}
par( mar=c(14, 4, 1, 2) + 0.1 )
plot( unlist(index), exp(unlist(coefs)), type="h",
xlab="",ylab="Hazard ratio",xaxt="n")
abline(h=1,lty=2,col="red")
axis(1, at=1:length(paths), lab2[o], las=2,cex.axis=0.55 )
}
rm( list=ls() )
load("C:/Users/sunze/Dropbox/CancerGenomics/package/pathCluster/data/TCGA.RData")
setwd("C:/Users/sunze/Dropbox/CancerGenomics/package/pathCluster/R")
source("correctp.cox.R")
source("spls.cox.R")
source("spls.dv.R")
source("ust.R")
source("pls.cox.R")
source("predict.pls.cox.R")
data(TCGA)
train.list=prefilter( data=express.dat, time=t, status=d,
p.cut=0.5, plist=path.list )
##pathways left after prefiltering
pnames=names(train.list)
results=pathCluster( data=train.list, pathways=pnames,
time=t, status=d, fold=5, K=3, etas=c(0.1,0.9)  )
#results$genes
predicted=pred( obj=results, newx=train.list, n=50 )
prefilter <- function( data, time, status, p.cut, plist=plist ){
pvals <-foreach(i=1:ncol(data), .combine='c') %do% {
summary(coxph( Surv(time, status)~data[,i] ))$coef[5]
}
xlist<- lapply( plist,function(x){
idx<- which( (names(data)%in%x)==T & (pvals<=p.cut)==T )
data[,idx]
} )
return(xlist)
}
path.cluster <- function( data, pathways, time, status, fold, K, etas, seed=123  ){
set.seed(seed)
n=length(time)
cvfolds <- split(sample(n), rep(1:fold, length=n))
dimx=unlist( lapply(data,function(x){ncol(as.matrix(x))}) )
k.opt=eta.opt=NULL
score=genes=beta=spls.beta=w=list()
for(j in 1:length(pathways)){
xx=as.matrix( data[[j]],nrow=n,ncol=dimx[j] )
kmax=min( K, ncol(xx) )
if(kmax>1){
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
cvi=cv.coxsplsDR( list(x=xx,time=time,status=status),
givefold=cvfolds, nt=kmax, nfold=fold, eta=etas[i],
plot.it=F, se=T, sclaleY=F )
cbind( cvi$cv.error10[-1],cvi$cv.se10[-1]	)
}
h=which.max(aucs[,1])
se1=aucs[h,1]-aucs[h,2]
###find aucs within 1se of the maximum
mat=cbind( aucs, rep(1:kmax,length(etas)),
rep(etas,each=kmax) )[aucs[,1]>se1,]
tmp=aucs[,1][aucs[,1]>se1]
if(length(tmp)>1){
##choose the most parsimonious model in terms of genes
##always choose the smallest k among those with largest eta
q=which.max(mat[,4])
k.opt[j] <- mat[q,3]
eta.opt[j] <- mat[q,4]
}
if(length(tmp)==1){
k.opt[j]=mat[3]
eta.opt[j]=mat[4]
}
cox=coxph(Surv(time, status) ~ 1)
devres=residuals(cox,type="deviance")
spls.mod=spls.cox (x=xx, y=devres, K=k.opt[j], eta=eta.opt[j],
kappa=0.5, select="pls2", scale.x=T, scale.y=F, trace=F)
score[[j]]= data.frame(spls.mod$plsmod$variates$X)
spls.beta[[j]]=data.frame( colnames(xx),spls.mod$betahat )
rownames(spls.beta[[j]])=NULL
##objects saved for prediction
xA=spls.mod$x[,spls.mod$A]
genes[[j]]=colnames(xx)[spls.mod$A]
w[[j]]=spls.mod$pred$w
}else{
score[[j]]=xx
genes[[j]]=names(xx)
spls.beta[[j]]=NA
k.opt[j]=1
eta.opt[j]=w[[j]]=NA
}
}
names(genes)=pathways
names(spls.beta)=pathways
xx=foreach(j=1:length(score), .combine='cbind')%do%{score[[j]]}
set.seed(seed)
cvlas=cv.glmnet( x=as.matrix(xx),y=Surv(time, status),
family="cox",type.measure="deviance",alpha=1)
cols=sapply(score,ncol)
##this lambda should also be optional
path.beta=as.vector(coef(cvlas,s=cvlas$lambda.1se))
path.beta=data.frame( rep(pathways,cols),path.beta )
return(list( genes=genes, gene.beta=spls.beta, w=w, path.beta=path.beta ))
}
pred=function( obj, newx, n, cuts=NULL){
##number of pathways
beta=obj$path.beta
w=obj$w
genes=obj$genes
pathway=unique(beta[,1])
np=length(pathway)
psrp=matrix(0,nrow=n,ncol=np)
for(j in 1:np){
betaj=x=NULL
idx=which(beta[,1]==pathway[j])
betaj=beta[idx,2]
x=as.matrix(newx[[j]])
x=scale(x,T,T)
##predict score
A=which(colnames(x)%in%genes[[j]]==T)
xA=as.matrix(x[,A])
if(is.na(w[j])==T){sc=xA}
if(is.na(w[j])==F){sc=xA %*% w[[j]]}
if(ncol(sc)>1){psrp[,j]=sc %*% betaj}
if(ncol(sc)==1){psrp[,j]=sc*betaj}
}
risk=apply(psrp,1,function(x){length(which(x>0))})
if(is.null(cuts)){
low=as.numeric(summary(risk)[2])
high=as.numeric(summary(risk)[5])
}
if(length(cuts)==2){
low=cuts[1]
high=cuts[2]
}
riskcat=ifelse(risk<=low,"low","med")
riskcat=ifelse(risk>=high,"high",riskcat)
return(list(risk.index=risk,riskcat=riskcat,cuts=c(low,high)))
}
survival.curve<- function(predicted, time=t, status=d){
reg=survfit(Surv(t,d)~factor(predicted$riskcat))
cuts=predicted$cuts
plot( reg, col=c("red","black","green"),xlim=c(0,60),
xlab="Months From Diagnosis to Death",ylab="Survival Fraction (KM)" )
legend("bottomleft",lty=c(1,1,1),col=c("red","black","green"),
c( paste("High",">",cuts[2]),paste("Low","<",cuts[1]), "Medium"),bty="n")
}
survival.roc<- function(predicted, time=t, status=d){
roc=survivalROC(Stime=t,status=d,
marker=predicted$risk.index, predict.time=60, method="KM")
plot(roc$FP, roc$TP, type="l", xlim=c(0,1), ylim=c(0,1), col="red",
xlab="1-Specificity", ylab="Sensitivity")
abline(0,1)
}
train.list=prefilter( data=express.dat, time=t, status=d,
p.cut=0.5, plist=path.list )
##pathways left after prefiltering
pnames=names(train.list)
results=pathCluster( data=train.list, pathways=pnames,
time=t, status=d, fold=5, K=3, etas=c(0.1,0.9)  )
#results$genes
predicted=pred( obj=results, newx=train.list, n=50 )
survivalCurve<- function(predicted, time=t, status=d){
reg=survfit(Surv(t,d)~factor(predicted$riskcat))
cuts=predicted$cuts
plot( reg, col=c("red","black","green"),xlim=c(0,60),
xlab="Months From Diagnosis to Death",ylab="Survival Fraction (KM)" )
legend("bottomleft",lty=c(1,1,1),col=c("red","black","green"),
c( paste("High",">",cuts[2]),paste("Low","<",cuts[1]), "Medium"),bty="n")
}
survivalRoc<- function(predicted, time=t, status=d){
roc=survivalROC(Stime=t,status=d,
marker=predicted$risk.index, predict.time=60, method="KM")
plot(roc$FP, roc$TP, type="l", xlim=c(0,1), ylim=c(0,1), col="red",
xlab="1-Specificity", ylab="Sensitivity")
abline(0,1)
}
pathCluster <- function( data, pathways, time, status, fold, K, etas, seed=123  ){
set.seed(seed)
n=length(time)
cvfolds <- split(sample(n), rep(1:fold, length=n))
dimx=unlist( lapply(data,function(x){ncol(as.matrix(x))}) )
k.opt=eta.opt=NULL
score=genes=beta=spls.beta=w=list()
for(j in 1:length(pathways)){
xx=as.matrix( data[[j]],nrow=n,ncol=dimx[j] )
kmax=min( K, ncol(xx) )
if(kmax>1){
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
cvi=cv.coxsplsDR( list(x=xx,time=time,status=status),
givefold=cvfolds, nt=kmax, nfold=fold, eta=etas[i],
plot.it=F, se=T, sclaleY=F )
cbind( cvi$cv.error10[-1],cvi$cv.se10[-1]	)
}
h=which.max(aucs[,1])
se1=aucs[h,1]-aucs[h,2]
###find aucs within 1se of the maximum
mat=cbind( aucs, rep(1:kmax,length(etas)),
rep(etas,each=kmax) )[aucs[,1]>se1,]
tmp=aucs[,1][aucs[,1]>se1]
if(length(tmp)>1){
##choose the most parsimonious model in terms of genes
##always choose the smallest k among those with largest eta
q=which.max(mat[,4])
k.opt[j] <- mat[q,3]
eta.opt[j] <- mat[q,4]
}
if(length(tmp)==1){
k.opt[j]=mat[3]
eta.opt[j]=mat[4]
}
cox=coxph(Surv(time, status) ~ 1)
devres=residuals(cox,type="deviance")
spls.mod=spls.cox (x=xx, y=devres, K=k.opt[j], eta=eta.opt[j],
kappa=0.5, select="pls2", scale.x=T, scale.y=F, trace=F)
score[[j]]= data.frame(spls.mod$plsmod$variates$X)
spls.beta[[j]]=data.frame( colnames(xx),spls.mod$betahat )
rownames(spls.beta[[j]])=NULL
##objects saved for prediction
xA=spls.mod$x[,spls.mod$A]
genes[[j]]=colnames(xx)[spls.mod$A]
w[[j]]=spls.mod$pred$w
}else{
score[[j]]=xx
genes[[j]]=names(xx)
spls.beta[[j]]=NA
k.opt[j]=1
eta.opt[j]=w[[j]]=NA
}
}
names(genes)=pathways
names(spls.beta)=pathways
xx=foreach(j=1:length(score), .combine='cbind')%do%{score[[j]]}
set.seed(seed)
cvlas=cv.glmnet( x=as.matrix(xx),y=Surv(time, status),
family="cox",type.measure="deviance",alpha=1)
cols=sapply(score,ncol)
##this lambda should also be optional
path.beta=as.vector(coef(cvlas,s=cvlas$lambda.1se))
path.beta=data.frame( rep(pathways,cols),path.beta )
return(list( genes=genes, gene.beta=spls.beta, w=w, path.beta=path.beta ))
}
pred=function( obj, newx, n, cuts=NULL){
##number of pathways
beta=obj$path.beta
w=obj$w
genes=obj$genes
pathway=unique(beta[,1])
np=length(pathway)
psrp=matrix(0,nrow=n,ncol=np)
for(j in 1:np){
betaj=x=NULL
idx=which(beta[,1]==pathway[j])
betaj=beta[idx,2]
x=as.matrix(newx[[j]])
x=scale(x,T,T)
##predict score
A=which(colnames(x)%in%genes[[j]]==T)
xA=as.matrix(x[,A])
if(is.na(w[j])==T){sc=xA}
if(is.na(w[j])==F){sc=xA %*% w[[j]]}
if(ncol(sc)>1){psrp[,j]=sc %*% betaj}
if(ncol(sc)==1){psrp[,j]=sc*betaj}
}
risk=apply(psrp,1,function(x){length(which(x>0))})
if(is.null(cuts)){
low=as.numeric(summary(risk)[2])
high=as.numeric(summary(risk)[5])
}
if(length(cuts)==2){
low=cuts[1]
high=cuts[2]
}
riskcat=ifelse(risk<=low,"low","med")
riskcat=ifelse(risk>=high,"high",riskcat)
return(list(risk.index=risk,riskcat=riskcat,cuts=c(low,high)))
}
survivalCurve<- function(predicted, time=t, status=d){
reg=survfit(Surv(t,d)~factor(predicted$riskcat))
cuts=predicted$cuts
plot( reg, col=c("red","black","green"),xlim=c(0,60),
xlab="Months From Diagnosis to Death",ylab="Survival Fraction (KM)" )
legend("bottomleft",lty=c(1,1,1),col=c("red","black","green"),
c( paste("High",">",cuts[2]),paste("Low","<",cuts[1]), "Medium"),bty="n")
}
survivalRoc<- function(predicted, time=t, status=d){
roc=survivalROC(Stime=t,status=d,
marker=predicted$risk.index, predict.time=60, method="KM")
plot(roc$FP, roc$TP, type="l", xlim=c(0,1), ylim=c(0,1), col="red",
xlab="1-Specificity", ylab="Sensitivity")
abline(0,1)
}
train.list=prefilter( data=express.dat, time=t, status=d,
p.cut=0.5, plist=path.list )
##pathways left after prefiltering
pnames=names(train.list)
results=pathCluster( data=train.list, pathways=pnames,
time=t, status=d, fold=5, K=3, etas=c(0.1,0.9)  )
#results$genes
predicted=pred( obj=results, newx=train.list, n=50 )
plotPathwayEffect(results)
plotPathwayEffect<- function(results){
results<-results$path.beta
betas<-results[,2]
paths<-results[,1]
index=coefs=list()
mat=results[betas!=0,]
lab1=gsub( "KEGG_", "", paths )
lab2=gsub( "_PATHWAY", "", lab1 )
for(i in 1:length(paths)){
j=which( mat[,1]==paths[i] )
coefs[[i]]=mat[j,2]
}
o=order(-sapply(coefs,max))
coefs=coefs[o]
for(i in 1:length(paths)){
if(length(coefs[[i]])>1){
index[[i]]=seq( i, i+0.1*length(coefs[[i]])-0.1, 0.1 )
}
if(length(coefs[[i]])==1){index[[i]]=i}
}
par( mar=c(14, 4, 1, 2) + 0.1 )
plot( unlist(index), exp(unlist(coefs)), type="h",
xlab="",ylab="Hazard ratio",xaxt="n")
abline(h=1,lty=2,col="red")
axis(1, at=1:length(paths), lab2[o], las=2,cex.axis=0.55 )
}
plotPathwayEffect(results)
plotPathwayEffect(results)
if(kmax>1){
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
suppressWarnings(cvi <- cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE ))
#plot.it=F, sclaleY=F ))
cbind( cvi$cv.error10, cvi$cv.se10	)
}
h<-which.max(aucs[,1])
se1<-aucs[h,1]-aucs[h,2]
###find aucs within 1se of the maximum
mat<-cbind( aucs, rep(0:kmax,length(etas)),
rep(etas,each=(kmax+1)) )[aucs[,1]>se1,]
library(PICS)
data(TCGA)
prefilter.results=prefilter( data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList )
gene.results=selectGene( object=prefilter.results, fold=5, K=5, etas=c(0.1,0.9),seed=123)
path.results=selectPath( object=gene.results, seed=123)
gene.results
path.results
gene.results=selectGene( object=prefilter.results)
gene.results
path.results = selectPath(gene.results)
path.results
exit
